import streamlit as st
import pandas as pd
import joblib
import gdown
import os
import numpy as np

# ===== 1. T·∫£i model t·ª´ Google Drive =====
MODEL_FILE = "random_forest_with_encoding.pkl"
MODEL_ID = "1ZerzZ9eLY0twOlbUABwJn2MnYp4DKTHJ"

if not os.path.exists(MODEL_FILE):
    url = f"https://drive.google.com/uc?id={MODEL_ID}"
    gdown.download(url, MODEL_FILE, quiet=False)

# ===== 2. Load model & encoder =====
loaded = joblib.load(MODEL_FILE)

if isinstance(loaded, dict):
    model = loaded.get("model", loaded)
    encoders = loaded.get("encoders", {})  # dict ch·ª©a encoder cho t·ª´ng c·ªôt
else:
    model = loaded
    encoders = {}

# ===== 3. Load CSV ƒë·ªÉ l·∫•y danh s√°ch l·ª±a ch·ªçn =====
df = pd.read_csv("bds_dat_clean (1).csv")

# ===== 4. Giao di·ªán Streamlit =====
st.title("üîç D·ª± ƒëo√°n gi√° B·∫•t ƒë·ªông s·∫£n")

dien_tich = st.number_input("Di·ªán t√≠ch (m¬≤)", 10.0, 2000.0, 100.0)
mat_tien = st.number_input("M·∫∑t ti·ªÅn (m)", 0.5, 50.0, 5.0)
duong_vao = st.number_input("ƒê∆∞·ªùng v√†o (m)", 0.5, 50.0, 3.0)

loai_bds = st.selectbox("Lo·∫°i BDS", sorted(df["Lo·∫°i BDS"].dropna().unique()))
giay_to = st.selectbox("Gi·∫•y t·ªù ph√°p l√Ω", sorted(df["Gi·∫•y t·ªù ph√°p l√Ω"].dropna().unique()))
xa_phuong = st.selectbox("X√£/Ph∆∞·ªùng", sorted(df["X√£/Ph∆∞·ªùng"].dropna().unique()))
quan_huyen = st.selectbox("Qu·∫≠n/Huy·ªán", sorted(df["Qu·∫≠n/Huy·ªán"].dropna().unique()))

# ===== 5. X·ª≠ l√Ω khi b·∫•m n√∫t =====
if st.button("D·ª± ƒëo√°n gi√°"):
    try:
        input_df = pd.DataFrame([{
            "Di·ªán t√≠ch (m¬≤)": dien_tich,
            "M·∫∑t ti·ªÅn (m)": mat_tien,
            "ƒê∆∞·ªùng v√†o (m)": duong_vao,
            "Lo·∫°i BDS": loai_bds,
            "Gi·∫•y t·ªù ph√°p l√Ω": giay_to,
            "X√£/Ph∆∞·ªùng": xa_phuong,
            "Qu·∫≠n/Huy·ªán": quan_huyen
        }])

        # Encode d·ªØ li·ªáu n·∫øu c√≥ encoders
        for col, encoder in encoders.items():
            if col in input_df.columns:
                input_df[col] = encoder.transform(input_df[col])

        # D·ª± ƒëo√°n
        pred = model.predict(input_df)[0]
        st.success(f"üí∞ Gi√° d·ª± ƒëo√°n: {pred:,.2f} t·ª∑ VNƒê")

    except Exception as e:
        st.error(f"‚ùå L·ªói: {e}")



# import streamlit as st
# import pandas as pd
# import joblib
# import gdown
# import os
# import numpy as np

# # Th√¥ng tin model tr√™n Drive
# MODEL_FILE = "random_forest_with_encoding.pkl"
# MODEL_ID = "1ZerzZ9eLY0twOlbUABwJn2MnYp4DKTHJ"

# # T·∫£i model t·ª´ Drive n·∫øu ch∆∞a c√≥
# if not os.path.exists(MODEL_FILE):
#     url = f"https://drive.google.com/uc?id={MODEL_ID}"
#     gdown.download(url, MODEL_FILE, quiet=False)

# # Load model (trong dict n·∫øu c·∫ßn)
# loaded = joblib.load(MODEL_FILE)
# if isinstance(loaded, dict) and "model" in loaded:
#     model = loaded["model"]
# else:
#     model = loaded

# # Load CSV ri√™ng t·ª´ repo
# df = pd.read_csv("bds_dat_clean (1).csv")

# st.title("üîç D·ª± ƒëo√°n gi√° B·∫•t ƒë·ªông s·∫£n")

# dien_tich = st.number_input("Di·ªán t√≠ch (m¬≤)", 10.0, 2000.0, 100.0)
# mat_tien = st.number_input("M·∫∑t ti·ªÅn (m)", 0.5, 50.0, 5.0)
# duong_vao = st.number_input("ƒê∆∞·ªùng v√†o (m)", 0.5, 50.0, 3.0)

# loai_bds = st.selectbox("Lo·∫°i BDS", sorted(df["Lo·∫°i BDS"].dropna().unique()))
# giay_to = st.selectbox("Gi·∫•y t·ªù ph√°p l√Ω", sorted(df["Gi·∫•y t·ªù ph√°p l√Ω"].dropna().unique()))
# xa_phuong = st.selectbox("X√£/Ph∆∞·ªùng", sorted(df["X√£/Ph∆∞·ªùng"].dropna().unique()))
# quan_huyen = st.selectbox("Qu·∫≠n/Huy·ªán", sorted(df["Qu·∫≠n/Huy·ªán"].dropna().unique()))

# if st.button("D·ª± ƒëo√°n gi√°"):
#     input_df = pd.DataFrame([{
#         "Di·ªán t√≠ch (m¬≤)": dien_tich,
#         "M·∫∑t ti·ªÅn (m)": mat_tien,
#         "ƒê∆∞·ªùng v√†o (m)": duong_vao,
#         "Lo·∫°i BDS": loai_bds,
#         "Gi·∫•y t·ªù ph√°p l√Ω": giay_to,
#         "X√£/Ph∆∞·ªùng": xa_phuong,
#         "Qu·∫≠n/Huy·ªán": quan_huyen
#     }])
#     try:
#         pred = model.predict(input_df)[0]
#         st.success(f"üí∞ Gi√° d·ª± ƒëo√°n: {pred:,.2f} t·ª∑ VNƒê")
#     except Exception as e:
#         st.error(f"‚ùå L·ªói: {e}")






